"""Add deck versioning

Revision ID: c92f19bc96aa
Revises: b1c4068237c6
Create Date: 2025-04-08 21:36:23.676945

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c92f19bc96aa'
down_revision = 'b1c4068237c6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('deck_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('deck_id', sa.Integer(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('decklist_text', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['deck_id'], ['decks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('deck_id', 'version_number', name='_deck_version_uc')
    )
    with op.batch_alter_table('decks', schema=None) as batch_op:
        batch_op.add_column(sa.Column('current_version_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'deck_versions', ['current_version_id'], ['id'])

    with op.batch_alter_table('game_registrations', schema=None) as batch_op:
        batch_op.add_column(sa.Column('deck_version_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'deck_versions', ['deck_version_id'], ['id'])

    with op.batch_alter_table('match_players', schema=None) as batch_op:
        batch_op.add_column(sa.Column('deck_version_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'deck_versions', ['deck_version_id'], ['id'])
    
    # Create initial versions for all existing decks
    # Bind the SQLAlchemy engine to get access to the models
    from sqlalchemy import create_engine
    from sqlalchemy.orm import Session
    from datetime import datetime
    from app.models import Deck, DeckVersion, GameRegistration, MatchPlayer
    
    # Get database URL from environment or config
    import os
    from app import db
    
    # Create a session
    session = Session(db.engine)
    
    # Get all existing decks
    decks = session.query(Deck).all()
    
    # Create initial versions for each deck
    for deck in decks:
        # Create initial version
        initial_version = DeckVersion(
            deck_id=deck.id,
            version_number=1,
            decklist_text=deck.decklist_text,
            notes="Initial version created during migration",
            created_at=datetime.utcnow()
        )
        session.add(initial_version)
        session.flush()  # Get the version ID
        
        # Set the current version
        deck.current_version_id = initial_version.id
        session.add(deck)
    
    # Commit the changes
    session.commit()
    
    # Update existing game registrations to point to the initial versions
    for deck in decks:
        # Get the initial version for this deck
        initial_version = session.query(DeckVersion).filter_by(deck_id=deck.id, version_number=1).first()
        
        if initial_version:
            # Update game registrations
            registrations = session.query(GameRegistration).filter_by(deck_id=deck.id).all()
            for reg in registrations:
                reg.deck_version_id = initial_version.id
                session.add(reg)
            
            # Update match players
            match_players = session.query(MatchPlayer).filter_by(deck_id=deck.id).all()
            for mp in match_players:
                mp.deck_version_id = initial_version.id
                session.add(mp)
    
    # Commit the changes
    session.commit()
    session.close()

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('match_players', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('deck_version_id')

    with op.batch_alter_table('game_registrations', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('deck_version_id')

    with op.batch_alter_table('decks', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('current_version_id')

    op.drop_table('deck_versions')
    # ### end Alembic commands ###
